#
# Gitblit project descriptor
#

# Proxies
#
# Moxie automatically uses all proxy definitions from your local
# Maven settings (~/.m2/settings.xml).
#
# Moxie automatically uses all proxy definitions from your local
# Moxie settings (~/.moxie/settings.moxie).
#
# Unlike Maven, which assumes you will proxy everything and requires
# you to manually exclude hostnames (i.e. opt-out), Moxie allows you
# to specify what repositories will be proxied by a proxy definition
# (i.e. opt-in). If this is undesirable, Moxie also supports Maven-style
# opt-out proxy definitions too. 
#
# If you want Moxie proxy settings, copy and edit the following example
# opt-in proxy definition to a new text file: ~/.moxie/settings.moxie
#
# proxies:
# - { id: yourProxy, active: true, protocol: http, host: yourproxy.com, port: 8081, repositories: "central, mavencentral, restlet, codehaus" }

# Requires Moxie 0.5.0
requires: 0.5.0

# Project Metadata
name: Gitblit
description: pure Java Git solution
groupId: com.gitblit
artifactId: gitblit
version: 1.3.0-SNAPSHOT
inceptionYear: 2011
url: 'http://gitblit.com'

# Licenses section included for POM generation
licenses:
- {
    name: Apache ASL v2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  }

# Developers section included for POM generation
developers:
- {
  id: james
  name: James Moger
  url: 'https://plus.google.com/u/0/116428776452027956920'
  organization: VAS
  organizationUrl: 'http://www.vas.com'
  roles: developer
  }

# SCM section included for POM generation
scm: {
  connection: 'scm:git:git://github.com/gitblit/gitblit.git'
  developerConnection: 'scm:git:https://github.com/gitblit/gitblit.git'
  url: 'https://github.com/gitblit/gitblit'
  tag: HEAD
  }

# Mainclass is used for setting jar manifests and using the mx:run target
mainclass: com.gitblit.Launcher

# Moxie supports multiple source folders and allows you to assign
# a scope to each folder.
sourceFolders:
- compile 'src'
- compile 'resources'
- test 'tests'

# Generate Eclipse project files.
# Generate IntelliJ IDEA module files.
# Generate a distribution Maven POM (not suitable for building with Maven).
apply: eclipse, intellij, pom

# Copy all retrieved dependencies to the "ext" folder.
# Generated IDE settings (.classpath, etc) will use the artifacts
# from this project-relative folder. This allows the IDE settings
# to be version-controlled and shared.
dependencyFolder: ext

# Register the Eclipse JGit Maven repository
registeredRepositories:
- { id: jgit, url: 'http://download.eclipse.org/jgit/maven' }

# Source all dependencies from the following repositories in the specified order
repositories: central, jgit

# Control how Moxie uses ~/.m2/repository
#
# Valid options are:
#   IGNORE   Ignore Maven cache artifacts. All dependencies will be retrieved
#            from the specified remote repositories. Best for reproducible builds.
#   LINK     Directly link to existing artifacts and metadata in Maven cache.
#            Not recommended when using metaversions like SNAPSHOT, RELEASE,
#            and LATEST.
#   COPY     Copy existing artifacts and metadata from Maven cache into
#            ~/.moxie/local rather than retrieving them from a remote repository.

mavenCacheStrategy: COPY

# Convenience properties for dependencies
properties: {
  jetty.version  : 7.6.8.v20121106
  wicket.version : 1.4.21
  lucene.version : 3.6.1
  jgit.version   : 2.2.0.201212191850-r
  groovy.version : 1.8.8
  bouncycastle.version : 1.47
  selenium.version : 2.28.0
  }

# Dependencies
#
#   May be tagged with ":label" notation to group dependencies.
#
#   "@extension" fetches the artifact with the specified extension
#   and ignores all transitive dependencies.
#
#   "!groupId" or "!groupId:artifactId" excludes all matching transitive
#   dependencies in that dependency's dependency graph.
#
#   "^repositoryId" boosts the specified repository to be first in the
#   repository list when resolving that particular dependency.

dependencies:
# Standard dependencies
- compile 'com.beust:jcommander:1.17' :fedclient :authority
- compile 'log4j:log4j:1.2.17' :war :fedclient :authority
- compile 'org.slf4j:slf4j-api:1.6.6' :war fedclient :authority
- compile 'org.slf4j:slf4j-log4j12:1.6.6' :war :fedclient :authority
- compile 'javax.mail:mail:1.4.3' :war :fedclient :authority
- compile 'javax.servlet:javax.servlet-api:3.0.1' :fedclient
- compile 'org.eclipse.jetty.aggregate:jetty-webapp:${jetty.version}' @jar
- compile 'org.eclipse.jetty:jetty-ajp:${jetty.version}' @jar
- compile 'org.apache.wicket:wicket:${wicket.version}' :war !org.mockito
- compile 'org.apache.wicket:wicket-auth-roles:${wicket.version}' :war !org.mockito
- compile 'org.apache.wicket:wicket-extensions:${wicket.version}' :war !org.mockito
- compile 'org.wicketstuff:googlecharts:${wicket.version}' :war
- compile 'org.apache.lucene:lucene-core:${lucene.version}' :war :fedclient
- compile 'org.apache.lucene:lucene-highlighter:${lucene.version}' :war :fedclient
- compile 'org.apache.lucene:lucene-memory:${lucene.version}' :war :fedclient
- compile 'org.tautua.markdownpapers:markdownpapers-core:1.3.2' :war
- compile 'org.eclipse.jgit:org.eclipse.jgit:${jgit.version}' :war :fedclient :manager :authority ^jgit
- compile 'org.eclipse.jgit:org.eclipse.jgit.http.server:${jgit.version}' :war :fedclient :manager :authority ^jgit
- compile 'org.bouncycastle:bcprov-jdk15on:${bouncycastle.version}' :war :authority
- compile 'org.bouncycastle:bcmail-jdk15on:${bouncycastle.version}' :war :authority
- compile 'org.bouncycastle:bcpkix-jdk15on:${bouncycastle.version}' :war :authority
- compile 'rome:rome:0.9' :war :manager :api
- compile 'com.google.code.gson:gson:1.7.2' :war :fedclient :manager :api
- compile 'org.codehaus.groovy:groovy-all:${groovy.version}' :war
- compile 'com.unboundid:unboundid-ldapsdk:2.3.0' :war
- compile 'org.apache.ivy:ivy:2.2.0' :war
- compile 'com.toedter:jcalendar:1.3.2' :authority
- compile 'org.apache.commons:commons-compress:1.4.1' :war
- test 'junit'
# Dependencies for Selenium web page testing
- test 'org.seleniumhq.selenium:selenium-java:${selenium.version}' @jar
- test 'org.seleniumhq.selenium:selenium-support:${selenium.version}' @jar
- test 'org.seleniumhq.selenium:selenium-firefox-driver:${selenium.version}'
# Dependencies with the "build" scope are retrieved
# and injected into the Ant runtime classpath
- build 'commons-net:commons-net:1.4.0'
- build 'jacoco'

