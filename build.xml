<?xml version="1.0" encoding="UTF-8"?>
<project name="gitblit" default="compile" xmlns:mx="antlib:org.moxie">

	<!-- Google Code upload task -->
	<taskdef classname="net.bluecow.googlecode.ant.GoogleCodeUploadTask" 
		classpath="${basedir}/tools/ant-googlecode-0.0.3.jar" name="gcupload"/>

	<!-- Moxie tasks -->
	<taskdef resource="tasks.properties" uri="antlib:org.moxie">
		<classpath location="${basedir}/tools/moxie.jar" />
	</taskdef>
	
	<!-- Project folders -->
	<property name="project.src.dir" value="${basedir}/src" />	
	<property name="project.resources.dir" value="${basedir}/resources" />	
	<property name="project.distrib.dir" value="${basedir}/distrib" />
	
	<!--
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		Initialize Moxie and setup build properties
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-->
	<target name="buildinfo">
	
		<!-- Setup Ant build from build.moxie and resolve dependencies.
		     if it exists, build.properties is automatically loaded -->
		<mx:init verbose="no" />
				
		<!-- Set Ant project properties -->
		<property name="distribution.zipfile" value="gitblit-${project.version}.zip" />
		<property name="distribution.tgzfile" value="gitblit-${project.version}.tar.gz" />
		<property name="distribution.warfile" value="gitblit-${project.version}.war" />
		<property name="fedclient.zipfile" value="fedclient-${project.version}.zip" />
		<property name="manager.zipfile" value="manager-${project.version}.zip" />
		<property name="authority.zipfile" value="authority-${project.version}.zip" />
		<property name="gbapi.zipfile" value="gbapi-${project.version}.zip" />
		<property name="express.zipfile" value="express-${project.version}.zip" />
		
		<!-- Download links -->
		<property name="gc.url" value="http://code.google.com/p/gitblit/downloads/detail?name=" />
	</target>

	
	<!--
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		Cleanup all build artifacts and folders
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-->
	<target name="clean" depends="buildinfo" description="Cleanup all build artifacts and folders">
		<!-- cleanup legacy build structure -->
		<!-- this can be eliminated after 1.3.0 release -->
		<delete>
			<fileset dir="${basedir}">
				<include name="*.zip" />
				<include name="*.war" />
				<include name="*.jar" />
			</fileset>
		</delete>
		<delete dir="${basedir}/deploy" failonerror="false" />
		<delete dir="${basedir}/express" failonerror="false" />
		<delete dir="${basedir}/jar" failonerror="false" />
		<delete dir="${basedir}/javadoc" failonerror="false" />
		<delete dir="${basedir}/site" failonerror="false" />
		<delete dir="${basedir}/temp" failonerror="false" />
		<delete dir="${basedir}/war" failonerror="false" />
		
		<!-- Clean build and target folders -->
		<mx:clean />

	</target>

	
	<!--
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		Setup
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-->
	<target name="setup" depends="buildinfo" description="Setup up project">

		<!-- copy distrib/data to project data folder -->
		<mkdir dir="${basedir}/data" />
		<copy todir="${basedir}/data" overwrite="false">
			<fileset dir="${project.distrib.dir}/data" />
		</copy>
		
		<!-- copy gitblit.properties to the WEB-INF folder.
		     this file is only used for parsing setting descriptions. -->
		<copy tofile="${project.src.dir}/WEB-INF/reference.properties" overwrite="true"
			file="${project.distrib.dir}/data/gitblit.properties" />
		
		<!-- 
			upgrade existing workspace to data folder
			this code can be eliminated after 1.3.0 release
		 -->
		<move todir="${basedir}/data" overwrite="true" failonerror="false">
			<fileset dir="${basedir}">
				<include name="users.conf" />
				<include name="projects.conf" />
				<include name="gitblit.properties" />
				<include name="serverKeyStore.jks" />
				<include name="serverTrustStore.jks" />
			</fileset>
		</move>
		<move todir="${basedir}/data/certs" overwrite="true" failonerror="false">
			<fileset dir="${basedir}/certs" />
		</move>
		<move todir="${basedir}/data/git" overwrite="true" failonerror="false">
			<fileset dir="${basedir}/git" />
		</move>
		<move todir="${basedir}/data/proposals" overwrite="true" failonerror="false">
			<fileset dir="${basedir}/proposals" />
		</move>
	</target>


	<!--
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		Compile
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-->
	<target name="compile" depends="setup" description="compiles Gitblit from source">
		
		<!-- Generate the Keys class from the properties file -->
		<mx:keys propertiesfile="${project.distrib.dir}/data/gitblit.properties"
			 	outputclass="com.gitblit.Keys"
			 	outputfolder="${project.src.dir}" />

		<!-- Compile project incrementally -->
		<mx:javac scope="compile" clean="false" />
		
	</target>

		
	<!--
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		Report the compile dependencies on the console
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-->
	<target name="report" depends="buildinfo" description="generate dependency report">
		
		<!-- Report compile dependencies to the console -->
		<mx:report scope="compile" destfile="${project.targetDirectory}/dependencies.txt" />
		
	</target>

	
	<!--
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		Test
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-->
	<target name="test" depends="compile" description="compiles Gitblit from source and runs unit tests">
		
		<!-- Compile unit tests -->
		<mx:javac scope="test" />
		
		<!-- Run unit tests -->
		<mx:test failonerror="true" />
		
	</target>


	<!--
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		Run Gitblit GO
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-->
	<target name="run" depends="compile" description="Run Gitblit GO">
		
		<!-- run the mainclass in a separate JVM -->
		<mx:run fork="true" />
		
	</target>			
			
	
	<!--
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		Build Gitblit GO
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-->
	<target name="buildGO" depends="compile" description="Build Gitblit GO distribution">
		
		<echo>Building Gitblit GO ${project.version}</echo>

		<local name="go.dir" />
		<property name="go.dir" value="${project.outputDirectory}/go" />	
		<delete dir="${go.dir}" />

		<prepareDataFolder tofolder="${go.dir}/data" />
		
		<!-- Build jar -->
		<mx:jar destfile="${go.dir}/gitblit.jar" includeresources="true">
			<mainclass name="com.gitblit.GitBlitServer" />
			<launcher paths="ext" />
		</mx:jar>

		<!-- Generate the docs for the GO build -->
		<generateDocs tofolder="${go.dir}/docs" />
		
		<!-- Create GO Windows Zip deployment -->
		<mx:zip basedir="${go.dir}">
			<!-- LICENSE and NOTICE -->
			<fileset dir="${basedir}" >
				<include name="LICENSE" />
				<include name="NOTICE" />
			</fileset>
			<!-- Distrib files -->
			<zipfileset dir="${project.distrib.dir}/win" />
			<!-- include all dependencies -->
			<dependencies prefix="ext" />
		</mx:zip>

		<!-- Create GO Linux/OSX tar.gz deployment -->
		<mx:tar basedir="${go.dir}" longfile="gnu" compression="gzip">
			<!-- LICENSE and NOTICE -->
			<fileset dir="${basedir}" >
				<include name="LICENSE" />
				<include name="NOTICE" />
			</fileset>
			<!-- Distrib files -->
			<tarfileset dir="${project.distrib.dir}/linux" filemode="755" />
			<!-- include all dependencies -->
			<dependencies prefix="ext" />
		</mx:tar>		

	</target>
	
	
	<!--
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		Build Gitblit WAR
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-->
	<target name="buildWAR" depends="compile" description="Build Gitblit WAR">
		
		<echo>Building Gitblit WAR ${project.version}</echo>

		<local name="war.dir" />
		<property name="war.dir" value="${project.outputDirectory}/war" />
		<delete dir="${war.dir}" />
		
		<local name="webinf" />
		<property name="webinf" value="${war.dir}/WEB-INF" />

		<!-- Generate the docs for the WAR build -->
		<generateDocs tofolder="${webinf}/docs" />

		<!-- Prepare the data folder -->
		<prepareDataFolder toFolder="${webinf}/data" />

		<!-- Build the WAR web.xml from the prototype web.xml -->
		<mx:webxml sourcefile="${project.src.dir}/WEB-INF/web.xml" destfile="${webinf}/web.xml" />

		<!-- Build the WAR file -->
		<mx:zip basedir="${war.dir}" destfile="${project.targetDirectory}/${distribution.warfile}" compress="true" >
			<!-- Resources in root -->
			<fileset dir="${project.resources.dir}">
				<exclude name="thumbs.db" />
				<exclude name="*.mkd" />
			</fileset>
			<!-- WEB-INF folder -->
			<zipfileset fullpath="WEB-INF/reference.properties" 
				file="${project.distrib.dir}/data/gitblit.properties" />
			<zipfileset prefix="WEB-INF" dir="${basedir}" >
				<include name="LICENSE" />
				<include name="NOTICE" />
			</zipfileset>
			<!-- Classes and classpath resources -->
			<zipfileset prefix="WEB-INF/classes" dir="${project.compileOutputDirectory}">
				<include name="**/*.class" />
				<include name="**/*.properties" />
				<include name="**/*.mkd" />
				<exclude name="WEB-INF" />
			</zipfileset>
			<!-- include "war" tagged dependencies -->
			<dependencies prefix="WEB-INF/lib" tag="war" />
		</mx:zip>
	</target>


	<!-- 
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		Build the stand-alone, command-line Gitblit Federation Client
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-->
	<target name="buildFederationClient" depends="compile" description="Builds the stand-alone Gitblit federation client">
		<echo>Building Gitblit Federation Client ${project.version}</echo>
	
		<!-- generate jar by traversing the class hierarchy of the specified
			 classes, exclude any classes in classpath jars -->
		<mx:genjar dependencies="" excludeClasspathJars="true"
			destfile="${project.targetDirectory}/fedclient.jar">
			<mainclass name="com.gitblit.FederationClient" />
			<launcher paths="ext" />
			<resource file="${project.compileOutputDirectory}/log4j.properties" />
		</mx:genjar>
		
		<!-- Build the federation client zip file -->
		<mx:zip destfile="${project.targetDirectory}/${fedclient.zipfile}">
			<fileset dir="${basedir}">
				<include name="LICENSE" />
				<include name="NOTICE" />
			</fileset>
			<fileset dir="${project.targetDirectory}">
				<include name="fedclient.jar" />
			</fileset>
			<fileset dir="${project.distrib.dir}">
				<include name="federation.properties" />
			</fileset>
			<!-- include "fedclient" tagged dependencies -->
			<dependencies prefix="ext" tag="fedclient" />
		</mx:zip>
		
		<!-- Cleanup -->
		<delete file="${project.targetDirectory}/fedclient.jar" />
		
	</target>


	<!-- 
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		Build a Gitblit filesystem for deployment to RedHat OpenShift Express
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-->
	<target name="buildExpress" depends="compile" description="Build exploded WAR file suitable for deployment to OpenShift Express">
		<echo>Building Gitblit Express for RedHat OpenShift ${project.version}</echo>
		
		<local name="express.dir" />
		<property name="express.dir" value="${project.outputDirectory}/express" />		
		<delete dir="${express.dir}" />
		
		<!-- Create the OpenShift filesystem -->
		<local name="deployments.root" />
		<property name="deployments.root" value="${express.dir}/deployments/ROOT.war"/>
		<mkdir dir="${deployments.root}" />
		<touch file="${express.dir}/deployments/ROOT.war.dodeploy" />

		<local name="webinf" />
		<property name="webinf" value="${deployments.root}/WEB-INF" />

		<!-- Prepare the data folder -->
		<prepareDataFolder toFolder="${webinf}/data" />
					
		<!-- Build the Express web.xml from the prototype web.xml and gitblit.properties -->
		<!-- THIS FILE IS NOT OVERRIDDEN ONCE IT IS BUILT!!! -->
		<mx:webxml sourcefile="${project.src.dir}/WEB-INF/web.xml" destfile="${webinf}/web.xml"
		propertiesFile="${project.distrib.dir}/data/gitblit.properties"
		skip="server.*" />

		<!-- Gitblit classes -->
		<jar destfile="${webinf}/lib/gitblit.jar">
			<fileset dir="${project.compileOutputDirectory}">
				<exclude name="WEB-INF/" />
				<exclude name="com/gitblit/tests/" />
				<exclude name="com/gitblit/build/**" />
				<exclude name="com/gitblit/client/**" />
				<exclude name="com/gitblit/GitBlitServer*.class" />
				<exclude name="com/gitblit/Launcher*.class" />
				<exclude name="com/gitblit/authority/**" />
			</fileset>
		</jar>

		<!-- Build Express Zip file -->
		<mx:zip basedir="${express.dir}" destfile="${project.targetDirectory}/${express.zipfile}">
			<fileset dir="${basedir}">
				<include name="LICENSE" />
				<include name="NOTICE" />
			</fileset>
			<!-- README -->
			<zipfileset fullpath="README.gitblit" file="${project.siteSourceDirectory}/openshift.mkd" />
			<!-- resources -->
			<zipfileset prefix="deployments/ROOT.war" dir="${project.resources.dir}">
				<exclude name="thumbs.db" />
				<exclude name="*.mkd" />
			</zipfileset>
			<!-- reference.properties -->
			<zipfileset fullpath="deployments/ROOT.war/WEB-INF/reference.properties" 
				file="${project.distrib.dir}/data/gitblit.properties" />
			<!-- include "war" tagged dependencies -->
			<dependencies prefix="deployments/ROOT.war/WEB-INF/lib" tag="war" />
		</mx:zip>

	</target>


	<!-- 
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		Build the stand-alone, Gitblit Manager
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-->
	<target name="buildManager" depends="compile" description="Builds the stand-alone Gitblit Manager">
		<echo>Building Gitblit Manager ${project.version}</echo>

		<!-- generate jar by traversing the class hierarchy of the specified
			 classes, exclude any classes in classpath jars -->
		<mx:genjar dependencies="" excludeClasspathJars="true"
			destfile="${project.targetDirectory}/manager.jar">
			<resource file="${project.src.dir}/com/gitblit/client/splash.png" />
			<resource file="${project.resources.dir}/gitblt-favicon.png" />
			<resource file="${project.resources.dir}/gitweb-favicon.png" />
			<resource file="${project.resources.dir}/git-orange-16x16.png" />
			<resource file="${project.resources.dir}/user_16x16.png" />
			<resource file="${project.resources.dir}/users_16x16.png" />
			<resource file="${project.resources.dir}/settings_16x16.png" />
			<resource file="${project.resources.dir}/lock_go_16x16.png" />
			<resource file="${project.resources.dir}/lock_pull_16x16.png" />
			<resource file="${project.resources.dir}/shield_16x16.png" />
			<resource file="${project.resources.dir}/federated_16x16.png" />
			<resource file="${project.resources.dir}/cold_16x16.png" />
			<resource file="${project.resources.dir}/book_16x16.png" />
			<resource file="${project.resources.dir}/bug_16x16.png" />
			<resource file="${project.resources.dir}/health_16x16.png" />
			<resource file="${project.resources.dir}/feed_16x16.png" />
			<resource file="${project.resources.dir}/bullet_feed.png" />
			<resource file="${project.resources.dir}/search-icon.png" />
			<resource file="${project.resources.dir}/commit_changes_16x16.png" />
			<resource file="${project.resources.dir}/commit_merge_16x16.png" />
			<resource file="${project.resources.dir}/commit_divide_16x16.png" />
			<resource file="${project.resources.dir}/star_16x16.png" />
			<resource file="${project.resources.dir}/blank.png" />
			<resource file="${project.src.dir}/log4j.properties" />
			<resource>
				<!-- inlcude all translations -->
				<fileset dir="${project.src.dir}/com/gitblit/wicket">
					<include name="*.properties" />
				</fileset>
			</resource>

			<mainclass name="com.gitblit.client.GitblitManagerLauncher" />
			<manifest>
				<attribute name="SplashScreen-Image" value="splash.png" />
			</manifest>
		</mx:genjar>

		<!-- Build Manager Zip file -->
		<mx:zip destfile="${project.targetDirectory}/${manager.zipfile}">
			<fileset dir="${basedir}">
				<include name="LICENSE" />
				<include name="NOTICE" />
			</fileset>
			<fileset dir="${project.targetDirectory}">
				<include name="manager.jar" />
			</fileset>
			<!-- include "manager" tagged dependencies -->
			<dependencies prefix="ext" tag="manager" />
		</mx:zip>
		
		<!-- Cleanup -->
		<delete file="${project.targetDirectory}/manager.jar" />
	</target>
	
	
	<!-- 
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		Build the stand-alone, Gitblit Authority
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-->
	<target name="buildAuthority" depends="compile" description="Builds the stand-alone Gitblit Authority">
		<echo>Building Gitblit Authority ${project.version}</echo>

		<!-- generate jar by traversing the class hierarchy of the specified
			 classes, exclude any classes in "authority" classpath jars -->
		<mx:genjar dependencies="authority" excludeClasspathJars="true" 
			destfile="${project.targetDirectory}/authority.jar">
			<resource file="${project.src.dir}/com/gitblit/client/splash.png" />
			<resource file="${project.resources.dir}/gitblt-favicon.png" />
			<resource file="${project.resources.dir}/user_16x16.png" />
			<resource file="${project.resources.dir}/users_16x16.png" />
			<resource file="${project.resources.dir}/rosette_16x16.png" />
			<resource file="${project.resources.dir}/rosette_32x32.png" />
			<resource file="${project.resources.dir}/vcard_16x16.png" />
			<resource file="${project.resources.dir}/settings_16x16.png" />
			<resource file="${project.resources.dir}/settings_32x32.png" />
			<resource file="${project.resources.dir}/search-icon.png" />
			<resource file="${project.resources.dir}/mail_16x16.png" />
			<resource file="${project.resources.dir}/script_16x16.png" />
			<resource file="${project.resources.dir}/blank.png" />
			<resource file="${project.resources.dir}/bullet_green.png" />
			<resource file="${project.resources.dir}/bullet_orange.png" />
			<resource file="${project.resources.dir}/bullet_red.png" />
			<resource file="${project.resources.dir}/bullet_white.png" />
			<resource file="${project.resources.dir}/bullet_delete.png" />
			<resource file="${project.resources.dir}/bullet_key.png" />
			<resource file="${project.src.dir}/log4j.properties" />
			<resource>
				<!-- inlcude all translations -->
				<fileset dir="${project.src.dir}/com/gitblit/wicket">
					<include name="*.properties" />
				</fileset>
			</resource>

			<mainclass name="com.gitblit.authority.Launcher" />
			<manifest>
				<attribute name="SplashScreen-Image" value="splash.png" />
			</manifest>
		</mx:genjar>

		<!-- Build Authority Zip file -->
		<mx:zip destfile="${project.targetDirectory}/${authority.zipfile}">
			<fileset dir="${basedir}">
				<include name="LICENSE" />
				<include name="NOTICE" />
			</fileset>
			<fileset dir="${project.targetDirectory}">
				<include name="authority.jar" />
			</fileset>
			<zipfileset dir="${project.distrib.dir}/data" prefix="data">
				<include name="users.conf" />
				<include name="gitblit.properties" />
			</zipfileset>
			<zipfileset dir="${project.distrib.dir}/data/certs" prefix="data/certs">
				<include name="authority.conf" />
				<include name="mail.tmpl" />
				<include name="instructions.tmpl" />
			</zipfileset>
			<!-- include "authority" tagged dependencies -->
			<dependencies prefix="ext" tag="authority" />
		</mx:zip>
				
		<!-- Cleanup -->
		<delete file="${project.targetDirectory}/authority.jar" />
	</target>
					
	<!-- 
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		Build the Gitblit API client library
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-->
	<target name="buildApiLibrary" depends="compile" description="Builds the Gitblit RPC client library">
		<echo>Building Gitblit API Library ${project.version}</echo>
	
		<local name="javadoc.dir" />
		<property name="javadoc.dir" value="${project.outputDirectory}/javadoc" />
		<delete dir="${javadoc.dir}" />

		<!-- Build API Library jar -->
		<mx:genjar dependencies="" excludeClasspathJars="true"
			destfile="${project.targetDirectory}/gbapi-${project.version}.jar">
			<class name="com.gitblit.Keys" />
			<class name="com.gitblit.client.GitblitClient" />
			<class name="com.gitblit.models.FederationModel" />
			<class name="com.gitblit.models.FederationProposal" />
			<class name="com.gitblit.models.FederationSet" />			
		</mx:genjar>
		
		<!-- Build API sources jar -->
		<zip destfile="${project.targetDirectory}/gbapi-${project.version}-sources.jar">
			<fileset dir="${project.src.dir}" defaultexcludes="yes">
				<include name="com/gitblit/Constants.java"/>
				<include name="com/gitblit/GitBlitException.java"/>
				<include name="com/gitblit/Keys.java"/>
		  		<include name="com/gitblit/client/**/*.java"/>
		  		<include name="com/gitblit/models/**/*.java"/>
		  		<include name="com/gitblit/utils/**/*.java"/>			  		
			</fileset>
		</zip>
		
		<!-- Build API JavaDoc jar -->
		<mx:javadoc destdir="${javadoc.dir}">
			<fileset dir="${project.src.dir}" defaultexcludes="yes">
				<include name="com/gitblit/Constants.java"/>
				<include name="com/gitblit/GitBlitException.java"/>
				<include name="com/gitblit/Keys.java"/>
		  		<include name="com/gitblit/client/**/*.java"/>
		  		<include name="com/gitblit/models/**/*.java"/>
		  		<include name="com/gitblit/utils/**/*.java"/>			  		
			</fileset>
			<redirector output="${project.outputDirectory}/javadoc.log" append="false" />
		</mx:javadoc>
		  			
		<zip destfile="${project.targetDirectory}/gbapi-${project.version}-javadoc.jar">
			<fileset dir="${javadoc.dir}" />
		</zip>
		
		<!-- Build the API library zip file -->
		<mx:zip destfile="${project.targetDirectory}/${gbapi.zipfile}">
			<fileset dir="${basedir}">
				<include name="LICENSE" />
				<include name="NOTICE" />
			</fileset>
			<fileset dir="${project.targetDirectory}">
				<include name="gbapi-${project.version}.jar" />
				<include name="gbapi-${project.version}-sources.jar" />
				<include name="gbapi-${project.version}-javadoc.jar" />
			</fileset>
			<!-- include "api" tagged dependencies -->
			<dependencies prefix="ext" tag="api" />
		</mx:zip>
		
		<!-- Cleanup -->
		<delete>
			<fileset dir="${project.targetDirectory}">
				<include name="javadoc/**" />
				<include name="gbapi-${project.version}.jar" />
				<include name="gbapi-${project.version}-sources.jar" />
				<include name="gbapi-${project.version}-javadoc.jar" />
		</fileset>
		</delete>
	</target>
		
		
	<!-- 
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		Build the Gitblit Website
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-->
	<target name="buildSite" depends="buildinfo" description="Build the Gitblit website">
		
		<echo>Building Gitblit Website ${project.version}</echo>

		<!-- Build Site -->
		<mx:doc	googleplusid="114464678392593421684" googleanalyticsid="UA-24377072-1" 
			googlePlusOne="true" injectPrettify="true" minify="true">
			<structure>
				<menu name="about">
					<page name="overview" src="siteindex.mkd" out="index.html" />
					<page name="features" src="features.mkd" />
					<page name="screenshots" src="screenshots.mkd" />
				</menu>
				<menu name="documentation">
					<page name="setup" src="setup.mkd" sectionLinks="true" />
					<page name="federation" src="federation.mkd" sectionLinks="true" />
					<divider />
					<page name="settings" src="properties.mkd" />
					<page name="faq" src="faq.mkd" sectionLinks="true" />
					<divider />
					<page name="design" src="design.mkd" sectionLinks="true" />
					<page name="rpc" src="rpc.mkd" sectionLinks="true" />
				</menu>
				<menu name="changelog">
					<page name="current release" src="releasecurrent.mkd" />
					<page name="older releases" src="releasehistory.mkd" />
					<divider />
					<page name="roadmap" src="roadmap.mkd" />					
				</menu>
				<menu name="downloads">
					<link name="Gitblit GO (Windows)" src="${gc.url}gitblit-${project.releaseVersion}.zip" />
					<link name="Gitblit GO (Linux/OSX)" src="${gc.url}gitblit-${project.releaseVersion}.tar.gz" />
					<link name="Gitblit WAR" src="${gc.url}gitblit-${project.releaseVersion}.war" />
					<link name="Gitblit Express" src="${gc.url}express-${project.releaseVersion}.zip" />
					<divider />
					<link name="Gitblit Manager" src="${gc.url}manager-${project.releaseVersion}.zip" />
					<link name="Federation Client" src="${gc.url}fedclient-${project.releaseVersion}.zip" />
					<divider />
					<link name="API Library" src="${gc.url}gbapi-${project.releaseVersion}.zip" />
				</menu>
				<menu name="links">
					<link name="Demo" src="https://demo-gitblit.rhcloud.com" />
					<divider />
					<link name="Github" src="${project.scmUrl}" />
					<link name="Issues" src="${project.issuesUrl}" />
					<link name="Discussion" src="${project.forumUrl}" />
					<link name="Google+" src="${project.socialNetworkUrl}" />
					<link name="Ohloh" src="http://www.ohloh.net/p/gitblit" />
				</menu>
				<divider />
			</structure>
			
			<substitute token="%GCURL%" value="${gc.url}" />
			
			<properties token="%PROPERTIES%" file="${project.distrib.dir}/data/gitblit.properties" />
			
			<nomarkdown startToken="%BEGINCODE%" endToken="%ENDCODE%" prettify="true" />
			<substitute token="%BEGINCODE%" value="&lt;pre class='prettyprint lang-java'&gt;" />
			<substitute token="%ENDCODE%" value="&lt;/pre&gt;" />
	
			<regex searchPattern="\b(issue)(\s*[#]?|-){0,1}(\d+)\b" replacePattern="&lt;a href='http://code.google.com/p/gitblit/issues/detail?id=$3'&gt;issue $3&lt;/a&gt;" />
			
			<!-- Set the logo from the mx:doc resources -->
			<logo file="${project.resources.dir}/gitblt_25_white.png" />
			<favicon file="${project.resources.dir}/gitblt-favicon.png" />
			
			<resource>
				<fileset dir="${project.resources.dir}">
					<include name="lock_go_16x16.png" />
					<include name="lock_pull_16x16.png" />
					<include name="shield_16x16.png" />
					<include name="cold_16x16.png" />
					<include name="bug_16x16.png" />
					<include name="book_16x16.png" />
					<include name="blank.png" />
					<include name="federated_16x16.png" />
					<include name="arrow_page.png" />
				</fileset>
				<fileset dir="${project.siteSourceDirectory}">
					<include name="*.png" />
					<include name="*.gif" />
					<include name="*.js" />
				</fileset>
			</resource>
		</mx:doc>		

		<!-- Copy Fancybox -->
		<mkdir dir="${project.siteTargetDirectory}/fancybox" />
		<copy todir="${project.siteTargetDirectory}/fancybox">
			<fileset dir="${project.siteSourceDirectory}/fancybox">
				<exclude name="thumbs.db" />
			</fileset>
		</copy>

		<!-- Generate thumbnails of screenshots -->
		<mx:thumbs input="png" output="png" maximumDimension="250" 
			sourceFolder="${project.siteSourceDirectory}/screenshots"
			destFolder="${project.siteTargetDirectory}/thumbs" />

		<!-- Copy screenshots -->
		<mkdir dir="${project.siteTargetDirectory}/screenshots" />
		<copy todir="${project.siteTargetDirectory}/screenshots">
			<fileset dir="${project.siteSourceDirectory}/screenshots">
				<include name="*.png" />
			</fileset>
		</copy>

	</target>


	<!--
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
		Build all binaries and site
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-->
	<target name="buildAll" depends="buildAuthority,buildGO,buildWAR,buildExpress,buildFederationClient,buildManager,buildApiLibrary,buildSite" />		

	
	<!--
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
		Update the gh-pages branch with the current site
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-->
	<target name="updateGhPages" depends="buildSite">
		<!-- Build gh-pages branch -->
		<mx:ghpages repositorydir="${basedir}" obliterate="true" />
	</target>
	

	<!-- 
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		Publish binaries to Google Code
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-->
	<target name="publishBinaries" depends="clean,buildGO,buildWAR,buildExpress,buildFederationClient,buildManager,buildApiLibrary" description="Publish the Gitblit binaries to Google Code">

		<echo>Uploading Gitblit ${project.version} binaries</echo>

		<!-- Upload Gitblit GO Windows ZIP file -->
		<googleUpload 
			 sourceFile="${distribution.zipfile}" 
			 targetFile="gitblit-${project.version}.zip"
			 description="Gitblit GO v${project.version} (standalone, integrated Gitblit server for Windows)" />

		<!-- Upload Gitblit GO Linux/Unix tar.gz file -->
		<googleUpload 
			 sourceFile="${distribution.tgzfile}" 
			 targetFile="gitblit-${project.version}.tar.gz"
			 description="Gitblit GO v${project.version} (standalone, integrated Gitblit server for Linux/Unix)" />

		<!-- Upload Gitblit WAR file -->
		<googleUpload 
		     sourceFile="${distribution.warfile}" 
		     targetFile="gitblit-${project.version}.war"
		     description="Gitblit WAR v${project.version} (standard WAR webapp for servlet containers)" />

		<!-- Upload Gitblit FedClient -->
		<googleUpload 
			sourceFile="${fedclient.zipfile}" 
			targetFile="fedclient-${project.version}.zip"
			description="Gitblit Federation Client v${project.version} (command-line tool to clone data from federated Gitblit instances)" />

		<!-- Upload Gitblit Manager -->
		<googleUpload 
			sourceFile="${manager.zipfile}" 
			targetFile="manager-${project.version}.zip"
			description="Gitblit Manager v${project.version} (Swing tool to remotely administer a Gitblit server)" />

		<!-- Upload Gitblit API Library -->
		<googleUpload 
			sourceFile="${gbapi.zipfile}" 
			targetFile="gbapi-${project.version}.zip"
			description="Gitblit API Library v${project.version} (JSON RPC library to integrate with your software)" />

		<!-- Upload Gitblit Express for RedHat OpenShift -->
		<googleUpload 
			sourceFile="${express.zipfile}" 
			targetFile="express-${project.version}.zip"
			description="Gitblit Express v${project.version} (run Gitblit on RedHat's OpenShift cloud)" />

	</target>


	<!--
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
		Publish site to site hosting service
		You must add ext/commons-net-1.4.0.jar to your ANT classpath.
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-->
	<target name="publishSite" depends="clean,buildSite,updateGhPages" description="Publish the Gitblit site to a webserver (requires ext/commons-net-1.4.0.jar)" >

		<echo>Uploading Gitblit ${project.version} website</echo>

		<ftp server="${ftp.server}"
			userid="${ftp.user}"
			password="${ftp.password}"
			remotedir="${ftp.dir}"
			passive="true"
			verbose="yes">
		<fileset dir="${project.siteTargetDirectory}" />
		</ftp>
	</target>


	<!--
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
		Compile from source, publish binaries, and build & deploy site
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-->
	<target name="publishAll" depends="publishBinaries,publishSite" />

	<!--
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		Build Gitblit Docs
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-->
	<macrodef name="generateDocs">
		<attribute name="toFolder"/>
		<sequential>
			<mx:doc outputfolder="@{toFolder}" injectPrettify="true" minify="true">
				<structure>
					<menu name="about">
						<page name="overview" src="siteindex.mkd" out="index.html" />
						<page name="features" src="features.mkd" />
					</menu>
					<menu name="documentation">
						<page name="setup" src="setup.mkd" sectionLinks="true" />
						<page name="federation" src="federation.mkd" />
						<divider />
						<page name="faq" src="faq.mkd" sectionLinks="true" />
						<page name="settings" src="properties.mkd" />
						<divider />
						<page name="design" src="design.mkd" />
						<page name="rpc" src="rpc.mkd" />
					</menu>
					<menu name="changelog">
						<page name="current release" src="releasecurrent.mkd" />
						<page name="older releases" src="releasehistory.mkd" />
					</menu>
					<menu name="links">
						<link name="Demo" src="https://demo-gitblit.rhcloud.com" />
						<divider />
						<link name="Github" src="${project.scmUrl}" />
						<link name="Issues" src="${project.issuesUrl}" />
						<link name="Discussion" src="${project.forumUrl}" />
						<link name="Google+" src="${project.socialNetworkUrl}" />
						<link name="Ohloh" src="http://www.ohloh.net/p/gitblit" />
					</menu>
				</structure>
				
				<properties token="%PROPERTIES%" file="${project.distrib.dir}/data/gitblit.properties" />
				
				<nomarkdown startToken="%BEGINCODE%" endToken="%ENDCODE%" prettify="true" />
				<substitute token="%BEGINCODE%" value="&lt;pre class='prettyprint lang-java'&gt;" />
				<substitute token="%ENDCODE%" value="&lt;/pre&gt;" />
		
				<regex searchPattern="\b(issue)(\s*[#]?|-){0,1}(\d+)\b" replacePattern="&lt;a href='http://code.google.com/p/gitblit/issues/detail?id=$3'&gt;issue $3&lt;/a&gt;" />
				
				<!-- Set the logo from the mx:doc resources -->
				<logo file="${project.resources.dir}/gitblt_25_white.png" />
				<favicon file="${project.resources.dir}/gitblt-favicon.png" />
				
				<resource>
					<fileset dir="${project.resources.dir}">
						<include name="lock_go_16x16.png" />
						<include name="lock_pull_16x16.png" />
						<include name="shield_16x16.png" />
						<include name="cold_16x16.png" />
						<include name="bug_16x16.png" />
						<include name="book_16x16.png" />
						<include name="blank.png" />
						<include name="federated_16x16.png" />
						<include name="arrow_page.png" />
					</fileset>
					<fileset dir="${project.siteSourceDirectory}">
						<include name="*.png" />
						<include name="*.gif" />
					</fileset>
				</resource>
			</mx:doc>
	    </sequential>
	</macrodef>
	
	<!--
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
		Macro to create a pristine data folder for the target build
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-->
	<macrodef name="prepareDataFolder">
		<attribute name="toFolder"/>
		<sequential>
			<mkdir dir="@{toFolder}" />
			<copy todir="@{toFolder}" overwrite="false">
				<fileset dir="${project.distrib.dir}/data">
					<include name="users.conf" />
					<include name="projects.conf" />
					<include name="gitblit.properties" />
				</fileset>
			</copy>
			<mkdir dir="@{toFolder}/groovy" />
			<copy todir="@{toFolder}/groovy">
				<fileset dir="${project.distrib.dir}/data/groovy">					
					<include name="sendmail.groovy" />
					<include name="sendmail-html.groovy" />
					<include name="jenkins.groovy" />
					<include name="protect-refs.groovy" />
					<include name="fogbugz.groovy" />
					<include name="thebuggenie.groovy" />
				</fileset>
			</copy>
      </sequential>
	</macrodef>
	
	<!--
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 
		Macro to upload binaries to GoogleCode
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-->
	<macrodef name="googleUpload">
		<attribute name="sourceFile"/>
		<attribute name="targetFile"/>
		<attribute name="description"/>
		<sequential>
			<gcupload 
				username="${googlecode.user}" 
				password="${googlecode.password}" 
				projectname="gitblit" 
				filename="${project.targetDirectory}/@{sourceFile}" 
				targetfilename="@{targetFile}"
				summary="@{description}"
				labels="Featured, Type-Package, OpSys-All" />		
	     </sequential>
	</macrodef>


	<!--
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
		Install Gitblit JAR for usage as Maven module
		~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
	-->
	<target name="installMaven" depends="compile" description="Install Gitblit JAR as Maven module">
		<local name="project.jar" />
		<property name="project.jar" value="${project.outputDirectory}/gitblit.jar" />
		<mx:jar destfile="${project.jar}" includeresources="true" />

		<exec executable="mvn">
			<arg value="install:install-file" />
			<arg value="-Dfile=${project.jar}" />
			<arg value="-DpomFile=${basedir}/pom.xml" />
			<arg value="-DcreateChecksum=true" />
		</exec>
	</target>

	<!--
    	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    	Upload Gitblit JAR to remote Maven repository
    	
    	build.properties:
    	   project.maven.repo.url = http://whatever.com/maven2
    	   project.maven.repo.id = whateverId
    	~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    -->
	<target name="uploadMaven" depends="compile" description="Upload Gitblit JAR to remote Maven repository">
		<local name="project.jar" />
		<property name="project.jar" value="${project.outputDirectory}/gitblit.jar" />
		<mx:jar destfile="${project.jar}" includeresources="true" />

		<exec executable="mvn">
			<arg value="deploy:deploy-file" />
			<arg value="-Dfile=${project.jar}" />
			<arg value="-DpomFile=${basedir}/pom.xml" />
			<arg value="-Durl=${project.maven.repo.url}" />
			<arg value="-DrepositoryId=${project.maven.repo.id}" />
			<arg value="-DcreateChecksum=true" />
		</exec>
	</target>					
</project>
